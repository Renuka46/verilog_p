module ahb_slave_interface(input hclk,hresetn,hwrite,hready_in,input [1:0]htrans,input [31:0]hwdata,haddr,pr_data, output reg hwrite_reg,hwrite_reg1,valid,output reg [31:0]hwdata1,hwdata2,haddr1,haddr2,output [31:0] hr_data,output reg
[2:0]temp_sel);
always@(posedge hclk)begin
if(!hresetn)
begin
haddr1<=0;
haddr2<=0;
end
else
begin
haddr1<=haddr;
haddr2<=haddr1;
end
end
always@(posedge hclk)begin
if(!hresetn)
begin
hwdata1<=0;
hwdata2<=0;
end
else
begin
hwdata1<=hwdata;
hwdata2<=hwdata1;
end
end
always@(posedge hclk)begin
if(!hresetn)
begin
hwrite_reg<=0;
hwrite_reg1<=0;
end
else
begin
hwrite_reg<=hwrite;
hwrite_reg1<=hwrite_reg;
end
end
always@(*)
begin
if(hready_in==1 && haddr >=32'h8000_0000 && haddr <32'h8c00_0000 &&htrans ==2'b10 || htrans ==2'b11)
valid=1;
else
valid=0;
end
always@(*)
begin
if(haddr >=32'h8000_0000 && haddr <32'h8400_0000)temp_sel=3'b001;else if (haddr >=32'h8400_0000 && haddr <32'h8800_0000)temp_sel=3'b010;else if (haddr >=32'h8800_0000 && haddr <32'h8c00_0000)temp_sel=3'b100;
temp_sel=0;
end
assign hr_data=pr_data;endmodule
APB_CONTROLLER
module apb_controller(input hclk,hresetn,hwrite_reg,hwrite_reg1,hwrite,valid,
input [31:0]hwdata,hwdata1,hwdata2,haddr,haddr1,haddr2,pr_data,
input[2:0]temp_sel,
output reg penable,pwrite,output reg hr_readyout,output reg [2:0]psel,output reg[31:0]paddr,pwdata);reg [2:0] present,next;
parameter ST_IDLE=3'b000,
ST_WWAIT=3'b001,
ST_READ=3'b010,
ST_RENABLE=3'b011,
ST_WRITE=3'b100,
ST_WRITEP=3'b101,
ST_WENABLE=3'b110,
ST_WENABLEP=3'b111;
//variables to create temporary output logicreg penable_temp,pwrite_temp,hr_readyout_temp;reg[2:0]psel_temp;
reg[31:0]paddr_temp,pwdata_temp;
//present state logic
always@(posedge hclk)
//present state
begin
if(! hresetn)
present<=ST_IDLE;
else
present<=next;
end
//next state logic
always@(*)
begin
next=ST_IDLE;
case(present)
ST_IDLE: if(valid==1&&hwrite==1)next=ST_WWAIT;
else if(valid==1&&hwrite==0)
next=ST_READ;
else
next=ST_IDLE;
ST_READ :next=ST_RENABLE;ST_RENABLE :if(valid==1&&hwrite==1)next=ST_WWAIT;
else if(valid==1&&hwrite==0)
next=ST_READ;
else
next=ST_IDLE;
ST_WRITE :if(valid==1)
next=ST_WENABLEP;
else
next=ST_WENABLE;
ST_WRITEP :next=ST_WENABLEP;ST_WWAIT :if(valid==1)next=ST_WRITEP;
else
next=ST_WRITE;
ST_WENABLE :if(valid==1&&hwrite==0)next=ST_READ;
else
next=ST_IDLE;
ST_WENABLEP :if(valid==1&&hwrite_reg==1)
next=ST_WRITEP;
else if(valid==0&&hwrite_reg==1)
next=ST_WRITE;
else if(hwrite_reg==0)
next=ST_READ;
default: next=ST_IDLE;endcase
end
//temporary output logicalways@(*)
begin
case(present)
ST_IDLE :if(valid==1&&hwrite==0)
begin
paddr_temp=haddr;
pwrite_temp=hwrite;
psel_temp=temp_sel;
penable_temp=0;
hr_readyout_temp=0;
end
else if(valid==1&&hwrite==1)
begin
psel_temp=0;
penable_temp=0;
hr_readyout_temp=1;
end
else
begin
psel_temp=0;
penable_temp=0;
hr_readyout_temp=1;
end
ST_READ : begin
penable_temp=1;
hr_readyout_temp=1;
end
ST_RENABLE :if(valid==1&&hwrite==0)begin
paddr_temp=haddr;
pwrite_temp=hwrite;
psel_temp=temp_sel;
penable_temp=0;
hr_readyout_temp=0;
end
else if(valid==1&&hwrite==1)
begin
psel_temp=0;
penable_temp=0;
hr_readyout_temp=1;
end
else
begin
psel_temp=0;
penable_temp=0;
hr_readyout_temp=1;
end
ST_WWAIT : begin
paddr_temp=haddr1;
pwdata_temp=hwdata;
pwrite_temp=hwrite;
psel_temp=temp_sel;
penable_temp=0;
hr_readyout_temp=0;
end
ST_WRITE : begin
penable_temp=1;
hr_readyout_temp=1;
end
ST_WRITEP : begin
penable_temp=1;
hr_readyout_temp=1;
end
ST_WENABLEP : begin
paddr_temp=haddr2;
pwdata_temp=hwdata1;
pwrite_temp=hwrite_reg;
psel_temp=temp_sel;
penable_temp=0;
hr_readyout_temp=0;
end
ST_WENABLE :if(valid==1&&hwrite==0)begin
paddr_temp=haddr2;
pwrite_temp=hwrite;
psel_temp=temp_sel;
penable_temp=0;
hr_readyout_temp=0;
end
end
else if(valid==1&&hwrite==1)
begin
psel_temp=0;
penable_temp=0;
hr_readyout_temp=1;
end
else
begin
psel_temp=0;
penable_temp=0;
hr_readyout_temp=1;
end
endcase
//output logic
always@(posedge hclk)begin
if(!hresetn)
begin
paddr<=0;
pwdata<=0;
pwrite<=0;
psel<=0;
penable<=0;
hr_readyout<=1;
end
else
begin
paddr<=paddr_temp;
pwdata<=pwdata_temp;
pwrite<=pwrite_temp;
psel<=psel_temp;
penable<=penable_temp;
hr_readyout<=hr_readyout_temp;
end
end
endmodule
BRIDGE_TOP
module bridge_top(input hclk,hresetn,hwrite,hready_in,
input [1:0]htrans,input [31:0]hwdata,haddr,pr_data,
output penable,pwrite,output hr_readyout,output [2:0]psel,
output[1:0]hres,output[31:0]paddr,pwdata,hr_data);
wire [31:0]hwdata1,hwdata2,haddr1,haddr2;wire [2:0]temp_sel;wire hwrite_reg,hwrite_reg1;wire valid;
ahb_slave_interface A1(hclk,hresetn,hwrite,hready_in,htrans,hwdata,haddr,pr_data,hwrite_reg,hwrite_reg1,valid,hwdata1,hwdata2,haddr1,haddr2,hr_data,temp_sel);
apb_controller A2
(hclk,hresetn,hwrite_reg,hwrite_reg1,hwrite,valid,hwdata,hwdata1,hwdata2,haddr,haddr1,haddr2,pr_data,temp_sel, penable,pwrite,hr_readyout,psel,paddr,pwdata);
endmodule
AHB_MASTER
module ahb_master(input hclk,hresetn,hr_readyout, input[31:0] hr_data,
output reg[31:0] haddr,hwdata, output reg hwrite,hready_in, output reg[1:0]htrans);
reg[2:0]hburst;//single,4,16,.....
reg[2:0]hsize;//size 8,16bit,....
integer i=0;
task single_write();begin
@(posedge hclk)
#1;
begin
hwrite=1;
htrans=2'd2;
hsize=0;
hburst=0;
hready_in=1;
haddr=32'h8000_0000;
end
@(posedge hclk)
#1;
begin
hwdata=32'h24;
htrans=2'd0;
end
end
endtask
task single_read();
begin
@(posedge hclk)
#1;
begin
hwrite=0;
htrans=2'd2;
hsize=0;
hburst=0;
hready_in=1;
haddr=32'h8000_0000;
end
@(posedge hclk)
#1;
begin
htrans=2'd0;
end
end
endtask
endmodule
APB_INTERFACE
module apb_interface (input pwrite,penable,input[2:0] psel,input [31:0] paddr,pwdata,output pwrite_out,penable_out, output [2:0] psel_out, output[31:0] paddr_out,pwdata_out,output reg [31:0] pr_data);assign pwrite_out =pwrite;assign paddr_out =paddr;
assign psel_out=psel;
assign pwdata_out=pwdata;assign penable_out=penable;always@(*)
begin
if(!pwrite && penable)pr_data={$random}%256;
else
pr_data=32'h0;
end
endmodule
TOP_TEST BENCH(tb)
module top_tb();
reg hclk;
reg hresetn;
wire [31:0]hr_data,haddr,hwdata,pr_data,paddr,pwdata,paddr_out,pwdata_out;wire hwrite,hready_in;wire [1:0]htrans;wire [1:0]hres =0;wire penable,pwrite,hr_readyout,pwrite_out,penable_out;wire [2:0]psel,psel_out;
ahb_master AHB (hclk,hresetn,hr_readyout, hr_data,haddr,hwdata,hwrite,hready_in,htrans);
bridge_top BRIDGE
(hclk,hresetn,hwrite,hready_in,htrans,hwdata,haddr,pr_data,penable,pwrite,hr_readyout,psel,hres,paddr,pwdata,hr_data);
apb_interface APB
(pwrite,penable,psel,paddr,pwdata,pwrite_out,penable_out,psel_out,paddr_out,pwdata_out,pr_data);
initial
begin
hclk=1'b0;
forever #10 hclk=~hclk;end
task reset;
begin
@(negedge hclk);
hresetn=1'b0;
@(negedge hclk);
hresetn=1'b1;
end
endtask
initial
begin
reset;
//AHB.single_write();
//AHB.single_read();
//AHB.burst_4_incr_write();
end
endmodule